name: Check git apply
permissions:
  contents: write
  pull-requests: write

on:
  push:
    branches-ignore:
      - 'ci'
    paths:
      - 'build/**'
  workflow_dispatch:
    inputs:
      rtag:
        description: 'wbrows/whitetools-chromium TAG or COMMIT'
        required: false
        default: ''

env:
  # Если workflow запускается через workflow_dispatch (вручную),
  # то берем значение из inputs. Если пустое — подменяем на GITHUB_SHA в шаге ниже
  RTAG: ${{ github.event.inputs.rtag }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      ###################################################################
      # 1. Устанавливаем RTAG, если он пустой
      ###################################################################
      - name: "Set RTAG if empty"
        run: |
          if [ -z "${{ env.RTAG }}" ]; then
            echo "RTAG=$GITHUB_SHA" >> $GITHUB_ENV
            echo "Устанавливаем RTAG=$GITHUB_SHA, так как он был пустым."
          else
            echo "RTAG задан: ${{ env.RTAG }}"
          fi

      ###################################################################
      # 2. Клонируем репозиторий (fetch-depth=0, чтобы были все ветки/коммиты)
      ###################################################################
      - name: Checkout 'wbrows/whitetools-chromium' (fetch-depth=0)
        uses: actions/checkout@v2
        with:
          repository: 'wbrows/whitetools-chromium'
          # можно указать ref: main — всё равно мы сделаем fetch всех веток
          ref: main
          path: 'cromite'
          fetch-depth: 0

      ###################################################################
      # 3. Ищем ветку, которая содержит этот коммит (RTAG) 
      ###################################################################
      - name: Find branch containing commit
        run: |
          # Переходим в склонированный репо
          cd cromite
          # На всякий случай подхватываем ${{ env.RTAG }} в локальную переменную
          RTAG="${{ env.RTAG }}"

          # Обновим все remote-данные (хотя fetch-depth=0 уже должно дать все)
          git fetch --all --prune

          # Список всех remote-веток, которые содержат коммит/тег
          BRANCHES=$(git branch --remotes --contains "$RTAG" 2>/dev/null || true)

          echo "Найдены ветки:"
          echo "$BRANCHES"
          
          if [ -z "$BRANCHES" ]; then
            echo "Can not recover the base commit (коммит не найден ни в одной ветке)."
            exit 1
          fi

          # Берем первую строку и удаляем префикс remotes/origin/:
          # например 'remotes/origin/main' => 'main'
          FIRST_BRANCH=$(echo "$BRANCHES" | head -n1 | sed 's|remotes/origin/||; s|^..||')
          
          echo "Используем ветку: $FIRST_BRANCH"
          echo "BRANCH=$FIRST_BRANCH" >> $GITHUB_ENV

      ###################################################################
      # 4. Проверяем версию Chromium (читаем build/RELEASE из склонированного репо)
      ###################################################################
      - name: Check chromium version
        run: |
          export HOME=$GITHUB_WORKSPACE
          VERSION=$(cat ~/cromite/build/RELEASE)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      ###################################################################
      # 5. Кэшируем исходники Chromium
      ###################################################################
      - name: Cache chromium sources
        uses: actions/cache@v3
        with:
          path: chromium-src
          key: chrsource-${{ env.VERSION }}

      ###################################################################
      # 6. Скачиваем Chromium (bromite) исходники (через SuperPatchUtils)
      ###################################################################
      - name: Download chromium ${{ env.VERSION }} sources
        run: |
          export HOME=$GITHUB_WORKSPACE
          sudo apt-get update
          sudo apt-get install -y wget unzip tar sed dos2unix patchutils wiggle curl

          # Скачиваем SuperPatchUtils
          wget https://github.com/uazo/superpatch/releases/latest/download/SuperPatchUtils.tar.gz
          tar xfz SuperPatchUtils.tar.gz
          rm SuperPatchUtils.tar.gz

          # Собственно, скачиваем
          ./bin/SuperPatchUtils bromite 625c295dad7acb16d8f756582e95468b50f1d9f6 ~/chromium-src

          # Делаем заготовку для git-репо, чтобы потом патчить
          mkdir -p ~/chromium/src && cp -rT ~/chromium-src ~/chromium/src
          cd ~/chromium/src
          git init
          git config user.email "you@example.com"
          git config user.name "Your Name"
          git add .
          git commit -m "$VERSION"
          git tag -a "$VERSION" -m "$VERSION"
          
          # Допустим, исключаем v8:
          git add -f v8 && git commit -m ":NOEXPORT: v8" || true

      ###################################################################
      # 7. Применяем патчи
      ###################################################################
      - name: Apply patches ${{ env.RTAG }}
        run: |
          export HOME=$GITHUB_WORKSPACE
          cd ~/chromium/src

          # Тут ваш скрипт
          export SILENT=true
          export SKIPAUTOGENERATED=true
          bash ~/cromite/tools/apply-all-patch.sh || exit 1

          rm -rf ~/cromite/build/patches-new/
          rm ~/cromite/build/cromite_patches_list_new.txt

      ###################################################################
      # 8. Экспортируем патчи (если что-то поменялось)
      ###################################################################
      - name: Export patches
        run: |
          export HOME=$GITHUB_WORKSPACE
          cd ~/chromium/src

          bash ~/cromite/tools/export-all-patch.sh

          cd ~/cromite
          rm -rf build/patches/*
          mv build/patches-new/* build/patches
          rm -rf build/patches-new/

      ###################################################################
      # 9. Проверяем, есть ли изменения (CHANGES=1)
      ###################################################################
      - name: Check differences CHANGES=${{ env.CHANGES }}
        run: |
          export HOME=$GITHUB_WORKSPACE
          cd ~/cromite

          CHANGES=0 && git diff --quiet || CHANGES=1
          echo "CHANGES=$CHANGES" >> $GITHUB_ENV

          if [[ "$CHANGES" -eq 1 ]]; then
              git add build/patches/*.patch
              git diff --name-only --staged
              # Можно собрать сообщение:
              # MESSAGE=$(git diff --name-only --staged)
              # echo "MESSAGE='$MESSAGE'" >> $GITHUB_ENV

      ###################################################################
      # 10. Создаём Pull Request, если есть изменения
      ###################################################################
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@c5a7806660adbe173f04e3e038b0ccdcd758773c
        if: env.CHANGES == '1'
        with:
          token: ${{ secrets.CROMITE_PULLS }}
          path: cromite
          base: ${{ env.BRANCH }}
          # push-to-fork: wbrows/whitetools-chromium  # если нужно пушить в форк
          add-paths: |
            build/patches/*.patch
          commit-message: '[AUTO] Patches auto-rebase'
          title: '[AUTO] Patches auto-rebase for ${{ env.BRANCH }} branch'
          body: ${{ env.MESSAGE }}
          delete-branch: true
          branch-suffix: short-commit-hash
