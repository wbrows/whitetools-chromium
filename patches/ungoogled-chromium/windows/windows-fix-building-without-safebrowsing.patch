# Fix building without Safe Browsing on Windows
# This also removes other unnecessary services that depend on Safe Browsing, such as Chrome Cleaner

--- a/chrome/app/BUILD.gn
+++ b/chrome/app/BUILD.gn
@@ -42,10 +42,7 @@ source_set("chrome_dll_resources") {
   deps = [ ":command_ids" ]
 
   if (is_win) {
-    sources += [
-      "chrome_dll.rc",
-      "etw_events/chrome_events_win.rc",
-    ]
+    sources += [ "chrome_dll.rc" ]
 
     deps += [
       "//build:branding_buildflags",
--- a/chrome/browser/chrome_content_browser_client.cc
+++ b/chrome/browser/chrome_content_browser_client.cc
@@ -5051,7 +5051,6 @@ std::wstring ChromeContentBrowserClient:
 #endif
     case sandbox::mojom::Sandbox::kPrintCompositor:
     case sandbox::mojom::Sandbox::kAudio:
-    case sandbox::mojom::Sandbox::kScreenAI:
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC)
     case sandbox::mojom::Sandbox::kVideoEffects:
 #endif
@@ -5155,7 +5154,6 @@ bool ChromeContentBrowserClient::PreSpaw
 #endif
     case sandbox::mojom::Sandbox::kPrintCompositor:
 #if !BUILDFLAG(IS_ANDROID)
-    case sandbox::mojom::Sandbox::kScreenAI:
 #endif
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_MAC)
     case sandbox::mojom::Sandbox::kVideoEffects:
--- a/chrome/browser/safe_browsing/BUILD.gn
+++ b/chrome/browser/safe_browsing/BUILD.gn
@@ -7,6 +7,7 @@ import("//components/safe_browsing/build
 import("//extensions/buildflags/buildflags.gni")
 
 static_library("safe_browsing") {
+  sources = [ "safe_browsing_dummy.cc" ]
   if (false) {
   sources = [
     "chrome_controller_client.cc",
--- /dev/null
+++ b/chrome/browser/safe_browsing/safe_browsing_dummy.cc
@@ -0,0 +1,3 @@
+#ifndef __safe_browsing_dummy__
+#define __safe_browsing_dummy__
+#endif
--- a/chrome/browser/signin/signin_util_win.cc
+++ b/chrome/browser/signin/signin_util_win.cc
@@ -275,12 +275,6 @@ bool IsGCPWUsedInOtherProfile(Profile* p
 }
 
 void SigninWithCredentialProviderIfPossible(Profile* profile) {
-  // This flow is used for first time signin through credential provider. Any
-  // subsequent signin for the credential provider user needs to go through
-  // reauth flow.
-  if (profile->GetPrefs()->GetBoolean(prefs::kSignedInWithCredentialProvider))
-    return;
-
   std::wstring cred_provider_gaia_id;
   std::wstring cred_provider_email;
 
--- a/components/safe_browsing/buildflags.gni
+++ b/components/safe_browsing/buildflags.gni
@@ -19,6 +19,7 @@ declare_args() {
   } else {
     safe_browsing_mode = 1
   }
+  safe_browsing_mode = 0
 
   # Allows building without //third_party/unrar included, for license reasons
   safe_browsing_use_unrar = true
